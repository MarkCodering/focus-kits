// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sessions  Session[]
  settings  UserSettings?
  stats     UserStats?
}

model UserSettings {
  id               String  @id @default(cuid())
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  focusMinutes     Int     @default(25)
  shortBreakMinutes Int    @default(5)
  longBreakMinutes Int     @default(15)
  autoStartBreaks  Boolean @default(false)
  soundEnabled     Boolean @default(true)
  notificationsEnabled Boolean @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model UserStats {
  id               String @id @default(cuid())
  userId           String @unique
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  totalSessions    Int    @default(0)
  totalMinutes     Int    @default(0)
  currentStreak    Int    @default(0)
  longestStreak    Int    @default(0)
  level            Int    @default(1)
  xp               Int    @default(0)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      SessionType
  duration  Int      // in minutes
  startedAt DateTime
  completedAt DateTime?
  isCompleted Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SessionType {
  FOCUS
  SHORT_BREAK
  LONG_BREAK
}
